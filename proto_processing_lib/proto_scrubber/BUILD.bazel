# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@rules_cc//cc:defs.bzl", "cc_proto_library")
load("@rules_proto//proto:defs.bzl", "proto_descriptor_set")

package(default_visibility = ["//visibility:public"])

cc_library(
    name = "field_checker_interface",
    hdrs = [
        "field_checker_interface.h",
    ],
    deps = [
        "@com_google_protobuf//:protobuf",
    ],
)

proto_descriptor_set(
    name = "field_mask_test_proto_descriptor",
    deps = [
        ":field_mask_test_proto",
    ],
)

proto_library(
    name = "field_mask_test_proto",
    srcs = ["testdata/field_mask_test.proto"],
    deps = [
        "@com_google_googleapis//google/longrunning:operations_proto",
        "@com_google_googleapis//google/rpc:status_proto",
        "@com_google_protobuf//:any_proto",
        "@com_google_protobuf//:duration_proto",
        "@com_google_protobuf//:field_mask_proto",
        "@com_google_protobuf//:struct_proto",
        "@com_google_protobuf//:timestamp_proto",
        "@com_google_protobuf//:wrappers_proto",
    ],
)

cc_proto_library(
    name = "field_mask_test_cc_proto",
    deps = [":field_mask_test_proto"],
)

cc_library(
    name = "unknown_field_checker",
    srcs = ["unknown_field_checker.cc"],
    hdrs = [
        "unknown_field_checker.h",
    ],
    deps = [
        ":field_checker_interface",
        ":utility",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "field_mask_node",
    srcs = [
        "field_mask_node.cc",
    ],
    hdrs = [
        "field_mask_node.h",
    ],
    deps = [
        ":constants",
        ":utility",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_protoconverter//:all",
        "@ocp//ocpdiag/core/compat:status_macros",
    ],
)

cc_library(
    name = "field_mask_tree",
    srcs = [
        "field_mask_tree.cc",
    ],
    hdrs = [
        "field_mask_tree.h",
    ],
    deps = [
        ":field_checker_interface",
        ":field_mask_node",
        "//proto_processing_lib:interface_util",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/log:absl_log",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_googleapis//google/rpc:error_details_cc_proto",
    ],
)

proto_library(
    name = "checksummer_test_proto",
    srcs = ["testdata/checksummer_test.proto"],
    deps = [
        "@com_google_protobuf//:any_proto",
        "@com_google_protobuf//:duration_proto",
        "@com_google_protobuf//:struct_proto",
        "@com_google_protobuf//:timestamp_proto",
        "@com_google_protobuf//:wrappers_proto",
    ],
)

cc_proto_library(
    name = "checksummer_test_cc_proto",
    deps = [":checksummer_test_proto"],
)

proto_descriptor_set(
    name = "checksummer_test_proto_descriptor",
    deps = [":checksummer_test_proto"],
)

cc_library(
    name = "checksummer",
    srcs = [
        "checksummer.cc",
    ],
    hdrs = [
        "checksummer.h",
    ],
    deps = [
        "@com_google_absl//absl/base",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/crc:crc32c",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/log:absl_log",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:cord",
        "@com_google_protobuf//:protobuf",
        "@com_google_protoconverter//:all",
        "@com_google_protofieldextraction//proto_field_extraction/message_data:message_data_interface",
        "@ocp//ocpdiag/core/compat:status_macros",
    ],
)

cc_library(
    name = "field_mask_path_checker",
    srcs = ["field_mask_path_checker.cc"],
    hdrs = ["field_mask_path_checker.h"],
    deps = [
        ":field_checker_interface",
        ":field_mask_node",
        "//proto_processing_lib:factory_helper",
        "//proto_processing_lib:interface_util",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/status",
    ],
)

proto_descriptor_set(
    name = "field_mask_path_checker_test_proto_descriptor",
    deps = [
        ":field_mask_path_checker_test_proto",
    ],
)

proto_library(
    name = "field_mask_path_checker_test_proto",
    srcs = ["testdata/field_mask_path_checker_test.proto"],
    deps = [
        "@com_google_protobuf//:duration_proto",
        "@com_google_protobuf//:timestamp_proto",
        "@com_google_protobuf//:wrappers_proto",
    ],
)

cc_proto_library(
    name = "field_mask_path_checker_test_cc_proto",
    deps = [":field_mask_path_checker_test_proto"],
)

cc_library(
    name = "constants",
    srcs = [
        "constants.cc",
    ],
    hdrs = ["constants.h"],
    deps = ["@com_google_absl//absl/base:core_headers"],
)

cc_library(
    name = "utility",
    srcs = ["utility.cc"],
    hdrs = ["utility.h"],
    deps = [
        ":constants",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/strings",
        "@com_google_protobuf//:protobuf",
        "@com_google_protobuf//:protobuf_lite",
    ],
)

cc_library(
    name = "proto_scrubber_enums",
    hdrs = ["proto_scrubber_enums.h"],
    deps = [],
)

cc_library(
    name = "internal_field_checker",
    srcs = ["internal_field_checker.cc"],
    hdrs = ["internal_field_checker.h"],
    deps = [
        ":constants",
        ":field_checker_interface",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "proto_scrubber",
    srcs = [
        "proto_scrubber.cc",
    ],
    hdrs = [
        "proto_scrubber.h",
    ],
    deps = [
        ":checksummer",
        ":constants",
        ":field_checker_interface",
        ":proto_scrubber_enums",
        ":utility",
        "//proto_processing_lib:interface_util",
        "@com_google_absl//absl/base",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/log:absl_log",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_absl//absl/synchronization",
        "@com_google_protobuf//:protobuf",
        "@com_google_protofieldextraction//proto_field_extraction/message_data:cord_message_data",
        "@com_google_protofieldextraction//proto_field_extraction/message_data:message_data_interface",
    ],
)

cc_test(
    name = "checksummer_test",
    srcs = [
        "checksummer_test.cc",
    ],
    data = [
        "testdata/checksum_message_with_unknown.txt",
        "testdata/checksummer_test_input.proto.txt",
        "testdata/checksummer_test_input_2.proto.txt",
        ":checksummer_test_proto_descriptor",
    ],
    deps = [
        ":checksummer",
        ":checksummer_test_cc_proto",
        ":utility",
        "@com_google_absl//absl/crc:crc32c",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
        "@com_google_protobuf//:protobuf",
        "@com_google_protofieldextraction//proto_field_extraction/message_data:cord_message_data",
        "@com_google_protofieldextraction//proto_field_extraction/test_utils:utils",
        "@ocp//ocpdiag/core/compat:status_macros",
        "@ocp//ocpdiag/core/testing:status_matchers",
    ],
)

cc_test(
    name = "unknown_field_checker_test",
    srcs = [
        "unknown_field_checker_test.cc",
    ],
    data = [
        "testdata/field_mask_test_input.proto.txt",
        ":field_mask_test_proto_descriptor",
    ],
    deps = [
        ":field_checker_interface",
        ":unknown_field_checker",
        ":utility",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
        "@com_google_protofieldextraction//proto_field_extraction/test_utils:utils",
        "@ocp//ocpdiag/core/compat:status_macros",
        "@ocp//ocpdiag/core/testing:status_matchers",
    ],
)

cc_test(
    name = "utility_test",
    size = "small",
    srcs = ["utility_test.cc"],
    deps = [
        ":utility",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
        "@com_google_protobuf//:protobuf",
        "@com_google_protobuf//:protobuf_lite",
    ],
)

cc_test(
    name = "field_mask_path_checker_test",
    srcs = ["field_mask_path_checker_test.cc"],
    data = [
        ":field_mask_path_checker_test_proto_descriptor",
    ],
    deps = [
        ":field_checker_interface",
        ":field_mask_path_checker",
        ":utility",
        "@com_google_absl//absl/functional:bind_front",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
        "@com_google_protofieldextraction//proto_field_extraction/test_utils:utils",
        "@ocp//ocpdiag/core/compat:status_macros",
        "@ocp//ocpdiag/core/testing:status_matchers",
    ],
)

cc_library(
    name = "proto_scrubber_test_lib",
    testonly = True,
    hdrs = [
        "proto_scrubber_test_lib.h",
    ],
    data = [
        ":field_mask_test_proto_descriptor",
    ],
    deps = [
        ":field_checker_interface",
        ":utility",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/status:statusor",
        "@com_google_googletest//:gtest_main",
        "@com_google_protobuf//:protobuf",
        "@com_google_protofieldextraction//proto_field_extraction/test_utils:utils",
    ],
)

cc_test(
    name = "field_mask_test",
    srcs = [
        "field_mask_node_test.cc",
        "field_mask_tree_test.cc",
        "proto_scrubber.cc",
    ],
    data = [
        "testdata/field_mask_test_input.proto.txt",
        ":field_mask_test_proto_descriptor",
    ],
    deps = [
        ":field_checker_interface",
        ":field_mask_node",
        ":field_mask_test_cc_proto",
        ":field_mask_tree",
        ":proto_scrubber",
        ":proto_scrubber_test_lib",
        ":utility",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
        "@com_google_protofieldextraction//proto_field_extraction/field_extractor:field_extractor_util",
        "@com_google_protofieldextraction//proto_field_extraction/test_utils:utils",
        "@ocp//ocpdiag/core/compat:status_macros",
        "@ocp//ocpdiag/core/testing:proto_matchers",
        "@ocp//ocpdiag/core/testing:status_matchers",
    ],
)
